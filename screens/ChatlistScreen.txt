import React, { useEffect, useState } from 'react';
import { View, Text, FlatList, TouchableOpacity, StyleSheet, TextInput } from 'react-native';
import { collection, query, where, onSnapshot, getDocs, addDoc } from 'firebase/firestore';
import { db, auth } from '../firebase';

const ChatListScreen = ({ navigation }) => {
    const [chats, setChats] = useState([]);
    const [searchQuery, setSearchQuery] = useState('');
    const [searchResults, setSearchResults] = useState([]);

    useEffect(() => {
        const unsubscribe = onSnapshot(
            query(collection(db, 'chats'), where('participants', 'array-contains', auth.currentUser.uid)),
            (snapshot) => {
                const data = [];
                snapshot.forEach((doc) => {
                    const participants = doc.data().participants;
                    const otherUser = participants.find((participant) => participant !== auth.currentUser.uid);
                    data.push({ id: doc.id, otherUser });
                });
                setChats(data);
            }
        );

        return () => unsubscribe();
    }, []);

    const searchUsers = async () => {
        if (!searchQuery.trim()) {
            setSearchResults([]);
            return;
        }

        const q = query(collection(db, 'users'), where('username', '==', searchQuery.trim()));
        const querySnapshot = await getDocs(q);
        const results = [];
        querySnapshot.forEach((doc) => {
            if (doc.id !== auth.currentUser.uid) {
                results.push({ id: doc.id, ...doc.data() });
            }
        });
        setSearchResults(results);
    };

    const startChat = async (userId) => {
        const existingChat = chats.find((chat) => chat.otherUser === userId);

        if (existingChat) {
            navigation.navigate('ChatScreenN', { chatId: existingChat.id });
        } else {
            const chatRef = await addDoc(collection(db, 'chats'), { participants: [userId, auth.currentUser.uid] });
            setChats([...chats, { id: chatRef.id, otherUser: userId }]);
            navigation.navigate('ChatScreenN', { chatId: chatRef.id });
        }
    };

    const renderItem = ({ item }) => {
        // Find the chat partner's username
        const chatPartner = searchResults.find((user) => user.id === item.otherUser);
        const username = chatPartner ? chatPartner.username : 'Unknown';

        return (
            <TouchableOpacity onPress={() => startChat(item.otherUser)}>
                <Text style={styles.chatItem}>{username}</Text>
            </TouchableOpacity>
        );
    };


    return (
        <View style={styles.container}>
            <TextInput
                style={styles.searchInput}
                placeholder="Search by username"
                value={searchQuery}
                onChangeText={setSearchQuery}
                onSubmitEditing={searchUsers}
            />
            <TouchableOpacity style={styles.searchButton} onPress={searchUsers}>
                <Text style={styles.searchButtonText}>Search</Text>
            </TouchableOpacity>
            {searchQuery.trim() !== '' && (
                <FlatList
                    data={searchResults}
                    keyExtractor={(item) => item.id}
                    renderItem={renderItem}
                />
            )}
            <FlatList
                data={chats}
                keyExtractor={(item) => item.id}
                renderItem={({ item }) => (
                    <TouchableOpacity onPress={() => startChat(item.otherUser)}>
                        <Text style={styles.chatItem}>{item.otherUser}</Text>
                    </TouchableOpacity>
                )}
            />
        </View>
    );
    
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#FFFFFF',
        padding: 10,
    },
    searchInput: {
        borderWidth: 1,
        borderColor: '#CCCCCC',
        borderRadius: 5,
        padding: 10,
        marginBottom: 10,
    },
    searchButton: {
        backgroundColor: '#faad14',
        borderRadius: 5,
        padding: 10,
        alignItems: 'center',
        marginBottom: 10,
    },
    searchButtonText: {
        color: '#000000',
        fontSize: 16,
        fontWeight: 'bold',
    },
    chatItem: {
        padding: 20,
        borderBottomWidth: 1,
        borderBottomColor: '#CCCCCC',
        fontSize: 18,
    },
    headerText: {
        fontSize: 20,
        fontWeight: 'bold',
        marginBottom: 10,
    },
});

export default ChatListScreen;
